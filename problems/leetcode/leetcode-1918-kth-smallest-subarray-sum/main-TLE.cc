// https://leetcode.cn/problems/kth-smallest-subarray-sum
// 1918. 第 K 小的子数组和
//
// 这个堆的做法 2klog(2n) 的做法，在 leetcode 上会超时
// 但是正确性是对的
// 这个思路我觉得还是挺好的，所以还是留下来

#include <iostream>
#include <queue>
#include <vector>
using namespace std;

class Solution {
   public:
    int kthSmallestSubarraySum(vector<int>& nums, int k) {
        int n = nums.size();

        // clang-format off
        // 把所有区间分成这么几行，每一行的区间的开始位置一样:
        //
        //                          A                                                        B
        //
        // [0] [0,1] [0,1,2] [0,1,2,3] [0,1,2,3,4] [0,1,2,3,4,5]       [0]
        // [1] [1,2] [1,2,3] [1,2,3,4] [1,2,3,4,5]                     [1] [1,0]
        // [2] [2,3] [2,3,4] [2,3,4,5]                                 [2] [2,1] [2,1,0],
        // [3] [3,4] [3,4,5] [5,4,3,2]                                 [3] [3,2] [3,2,1] [3,2,1,0]
        // [4] [4,5]                                                   [4] [4,3] [4,3,2] [4,3,2,1] [4,3,2,1,0]
        // [5]                                                         [5] [5,4] [5,4,3] [5,4,3,2] [5,4,3,2,1] [5,4,3,2,1,0]
        //
        //  A 和 B 中的头元素始终是行内和最小的区间
        // clang-format on
        struct P {
            int i;    // 区间开始
            int j;    // 区间结束
            int sum;  // 前缀和
            int d;    // 方向 0 表示右侧延伸，1 表示左侧延伸
        };

        // 按区间和做的所有区间的小顶堆
        auto cmp = [&](const auto& a, const auto& b) {
            return a.sum > b.sum || (a.sum == b.sum && a.i > b.i && a.j > b.j);
        };
        priority_queue<P, vector<P>, decltype(cmp)> q(cmp);

        // 每次从 A 和 B 中各取一个放入堆中
        for (int i = 0; i < n; i++) {
            q.push({i, i, nums[i], 0});
            q.push({i, i, nums[i], 1});
        }

        // 每次 pop 最小的
        // 每次pop 完后，延伸一下
        int ans = 0;

        k *= 2;

        while (k--) {
            auto [i, j, sum, d] = q.top();
            ans = sum;  // 记录每一次弹出的区间的和
            q.pop();
            if (d == 0 && j < n - 1) q.push({i, j + 1, sum + nums[j + 1], 0});
            if (d == 1 && i > 0) q.push({i - 1, j, sum + nums[i - 1], 1});
        }

        return ans;
    }
};

int main(void) {
    vector<int> nums{
        1158, 648,  2008, 632,  103,  4663, 6809, 6666, 3412, 1227, 6271, 1495,
        3849, 6092, 1148, 6129, 4321, 5723, 7773, 2454, 3852, 3372, 5920, 2764,
        3638, 6402, 5283, 5696, 109,  2350, 912,  1278, 492,  7219, 5263, 264,
        4950, 6154, 1422, 4123, 1314, 90,   3248, 6822, 3471, 5570, 7768, 7176,
        3722, 4540, 5828, 6796, 2114, 7530, 4687, 4112, 2508, 5812, 1863, 3471,
        7631, 1285, 2227, 7972, 754,  4273, 3093, 7792, 1026, 6088, 1736, 3281,
        5072, 459,  1794, 3214, 1505, 6738, 6112, 7996, 4582, 4957, 6896, 633,
        6690, 5673, 3838, 3911, 2566, 5347, 5259, 3319, 6777, 3117, 1351, 448,
        6581, 3044, 5298, 3476, 1596, 2212, 889,  856,  638,  2972, 4942, 6380,
        6936, 2749, 230,  1963, 2312, 1334, 4437, 873,  536,  1736, 4892, 90,
        6198, 7453, 2533, 1538, 4520, 1653, 5230, 7613, 266,  1969, 2206, 697,
        4671, 4627, 368,  4619, 6474, 3964, 375,  394,  2578, 764,  7730, 2529,
        70,   2922, 6158, 2314, 7854, 3262, 4098, 1597, 2577, 6160, 3201, 5945,
        2916, 7978, 1062, 5757, 5528, 798,  2715, 3337, 7345, 6074, 4126, 828,
        4114, 6615, 6350, 1231, 195,  4811, 6522, 3131, 3908, 4804, 7118, 6980,
        307,  2377, 1321, 1242, 5591, 3794, 646,  7252, 5128, 765,  7806, 5886,
        1898, 7246, 1767, 6615, 5583, 5360, 1154, 6299, 5887, 1320, 7895, 4110,
        4230, 5970, 4987, 5337, 4287, 7621, 6297, 2797, 3666, 6434, 1075, 2778,
        2383, 2952, 5108, 7012, 7702, 3530, 328,  7297, 5839, 6343, 5595, 3176,
        1959, 1711, 5001, 4972, 615,  7849, 1249, 4645, 5143, 4076, 798,  6593,
        123,  1169, 6278, 7131, 2536, 4483, 7107, 7938, 6533, 6402, 7333, 715,
        4088, 771,  3726, 2570, 1391, 7652, 2422, 1323, 559,  2295, 4723, 2977,
        2895, 731,  583,  1468, 5822, 6324, 3775, 2114, 3877, 2098, 6252, 7182,
        3622, 5328, 7571, 1151, 7700, 1016, 7961, 4660, 4000, 325,  2978, 7037,
        2349, 3285, 3351, 7021, 5077, 7514, 5576, 1057, 3612, 3005, 4199, 6921,
        5117, 7800, 2570, 3062, 684,  5589, 3385, 4145, 3688, 2154, 7188, 7173,
        5592, 350,  5085, 5275, 468,  6071, 6477, 2006, 5733, 6728, 4595, 66,
        1267, 6989, 863,  2382, 3079, 1297, 4671, 3271, 6995, 598,  1828, 3181,
        7162, 3787, 5482, 766,  2859, 3817, 3838, 5264, 4384, 7374, 6704, 3809,
        894,  704,  1477, 5995, 888,  7516, 7861, 7558, 3252, 6294, 3549, 1635,
        3290, 2693, 529,  2600, 2806, 4951, 3984, 1742, 5754, 6073, 3902, 937,
        2281, 3724, 314,  4466, 1276, 7771, 3850, 1193, 5245, 1749, 2623, 4655,
        257,  4925, 6343, 3116, 512,  7672, 6624, 2962, 6469, 3524, 3879, 1749,
        444,  1733, 7111, 188,  7805, 6215, 5601, 3465, 2211, 2065, 5208, 1443,
        685,  1162, 568,  2244, 3319, 670,  2444, 7158, 5835, 3699, 7138, 3439,
        4299, 1754, 5486, 7317, 2126, 1508, 6804, 441,  758,  7332, 7387, 3511,
        2802, 7892, 6171, 2433, 1348, 1627, 2862, 7717, 3434, 3946, 3896, 4387,
        5643, 6422, 1317, 7911, 5708, 3579, 2906, 7477, 5677, 4673, 3188, 6743,
        82,   4595, 6415, 7322, 4892, 1627, 638,  5921, 5472, 4739, 5051, 1185,
        2653, 5441, 6747, 7693, 6016, 6086, 6761, 6036, 6006, 2593, 117,  1233,
        7345, 3758, 7650, 1209, 4092, 7081, 2593, 931,  6489, 7947, 5521, 3330,
        2153, 4266, 5917, 31,   3691, 7728, 6820, 7023, 1030, 5197, 3681, 5235,
        7942, 4739, 799,  299,  1791, 6109, 1538, 3443, 5706, 4474, 6344, 1361,
        4923, 3093, 1771, 2852, 1719, 7802, 1566, 7961, 5568, 4726, 7825, 118,
        3034, 6667, 2981, 133,  2474, 7346, 2515, 4114, 6710, 7109, 1022, 5729,
        4089, 5316, 3736, 3392, 3362, 2882, 2886, 6785, 4444, 3489, 4286, 7980,
        6268, 2752, 929,  7589, 1441, 3759, 3510, 3057, 1450, 4529, 4874, 1333,
        4447, 3571, 3126, 2335, 6923, 5404, 5641, 5573, 3584, 5195, 2321, 5752,
        5083, 7684, 7579, 7421, 7021, 813,  718,  6603, 6859, 851,  735,  5322,
        135,  5049, 7640, 3370, 850,  4067, 6144, 6159, 5111, 7596, 4463, 817,
        5190, 3639, 4124, 4762, 6602, 268,  5470, 2375, 6978, 3446, 1736, 1826,
        6365, 3725, 4519, 3122, 938,  1603, 7016, 3847, 7787, 1020, 2873, 7927,
        6503, 7488, 3801, 3383, 7439, 6721, 5283, 5766, 6428, 6072, 3243, 63,
        7698, 3070, 6408, 1835, 4158, 2324, 2193, 7206, 5396, 2167, 2519, 6869,
        7395, 6514, 7450, 3398, 5516, 1979, 35,   7375, 7448, 3397, 268,  128,
        216,  1257, 6476, 3068, 6888, 6691, 4252, 6718, 6073, 4915, 2601, 2746,
        1397, 7858, 4688, 3523, 1982, 4553, 7975, 3207, 1579, 5049, 5280, 3223,
        6788, 423,  6565, 7635, 4734, 3516, 1056, 7696, 5213, 3199, 5965, 1424,
        3303, 7407, 2607, 4238, 1298, 3584, 1893, 816,  5817, 6564, 1035, 4131,
        970,  5173, 4727, 6425, 3212, 6907, 6244, 5139, 7510, 2132, 6860, 4530,
        1303, 7772, 2642, 1670, 764,  765,  211,  3584, 95,   5152, 6309, 4861,
        1254, 228,  5064, 5797, 4454, 7542, 7966, 646,  4685, 3133, 208,  6082,
        6015, 1070, 3717, 5198, 5174, 6371, 2934, 1529, 1964, 5346, 7356, 1817,
        2433, 1588, 4387, 6886, 2010, 5950, 6390, 6612, 6440, 3098, 6312, 2134,
        5401, 424,  2253, 680,  7660, 1178, 5140, 190,  5230, 4747, 7102, 848,
        909,  3762, 7596, 4882, 1006, 878,  1162, 2314, 2147, 7329, 1480, 761,
        634,  4049, 6920, 2961, 7477, 6868, 1704, 3202, 825,  4023, 6517, 180,
        3390, 603,  3986, 7858, 5126, 626,  1723, 5631, 3440, 3075, 7289, 2569,
        5191, 7441, 3694, 6624, 1320, 1473, 2448, 84,   7403, 1464, 5404, 4648,
        5171, 4970, 7003, 258,  961,  7995, 2809, 2841, 3965, 5030, 4916, 4477,
        42,   1298, 4275, 6076, 2085, 7591, 997,  1580, 4966, 243,  4391, 189,
        4244, 4193, 6234, 1249, 1772, 7102, 2990, 941,  7362, 1778, 242,  2684,
        1136, 1801, 684,  5962, 5666, 7700, 1037, 2193, 2242, 3946, 1633, 7809,
        754,  2856, 5801, 4518, 5341, 2412, 3827, 6105, 6628, 4062, 3573, 4200,
        7753, 3277, 7556, 1582, 2049, 1417, 1622, 5629, 6931, 7269, 5877, 2303,
        7880, 3219, 843,  4782, 6498, 6279, 4814, 2553, 1358, 6506, 1687, 7814,
        5916, 3997, 3551, 7233, 3655, 3472, 4886, 6121, 2226, 6684, 2612, 5103,
        882,  4975, 3138, 3517, 1637, 4647, 2892, 3064, 7356, 5184, 6713, 527,
        3682, 1371, 7287, 277,  7849, 4190, 2074, 4808, 3358, 2405, 4948, 6773,
        7187, 5285, 7786, 7907, 4346, 2886, 3263, 246,  940,  1474, 6628, 2644,
        3518, 6480, 1524, 2931, 2010, 596,  1763, 5382, 3045, 3048, 1189, 6386,
        2576, 1002, 79,   2610, 5639, 90,   5873, 2695, 1752, 3813, 4649, 6515,
        2635, 7363, 1906, 4601, 543,  3159, 2324, 4930, 1739, 4320, 1782, 844,
        4596, 2278, 5868, 4980};
    Solution s;
    cout << s.kthSmallestSubarraySum(nums, 496119) << endl;
    return 0;
}
